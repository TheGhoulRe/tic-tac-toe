{"version":3,"sources":["Classes/ServerConnection.js","GuestLogin.jsx","Login.jsx","GameBoard.jsx","Rules.js","CPUGame.jsx","LocalGame.jsx","Game.jsx","Heading.jsx","Home.jsx","App.js","reportWebVitals.js","index.js"],"names":["ServerConnection","baseUrl","this","getFrom","dir","a","callback","res","axios","get","data","postDataTo","post","RecurringServerConnection","delay","server","timer","setInterval","stop","clearInterval","process","GuestLogin","setUser","setHost","history","match","replace","params","host","startGame","guest","username","localStorage","extraUser","Login","push","useState","valid","setValid","className","type","id","maxLength","onChange","validate","getUserName","getGuestName","placeholder","disabled","onClick","guestname","test","document","getElementById","value","prepare","text","GameBoard","props","handleCellClick","table","Rules","checkHorizontal","checkVertical","checkMajorDiagonal","checkMinorDiagonal","x","y","winningMove","didWin","App","state","isXturn","progress","ended","started","pos","stateClone","setState","waitForNextMove","cpuClick","resetState","val","Promise","resolve","reject","setTimeout","nm","parseInt","Math","random","toString","sleep","start","length","isEmpty","Component","rsc","emitter","EventEmitter","Game","user","changeWhoseTurn","setTable","setEnded","setProgress","display","setDisplay","disconnected","setDisconnected","setIsXturn","stat","setStat","sdaWhoseTurn","changeSdaWhoseTurn","displayStat","setDisplayStat","awaitResetStat","setAwaitResetStat","allSetValues","on","allowIfActive","isDisconnected","emit","awaitReset","resetStateReceived","useEffect","cTurn","window","innerHeight","innerWidth","style","top","select","execCommand","innerHTML","err","render","char","name","fuser","intRes","Heading","whoseTurn","currentUser","guestUser","Home","addEventListener","setWhoseTurn","path","extrauser","component","LocalGame","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.ba62ac5a.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport default function ServerConnection( baseUrl) {\n\n    this.getFrom = async (dir, callback = (res) => {} ) => {\n        let res = (await axios.get(baseUrl + dir)).data;\n        callback(res);\n        return res;\n    };\n\n    this.postDataTo = async (dir, data) => {\n        let res = await axios.post(baseUrl + dir, data);\n        return res;\n    };\n\n}\n\nfunction RecurringServerConnection(baseUrl, delay) {\n    const server = new ServerConnection(baseUrl);\n    let timer = null;\n\n    this.getFrom = (dir, callback=(res) => {} ) => {\n        timer = setInterval(() => {server.getFrom(dir, callback);}, delay);\n    };\n    this.stop = () => {\n        clearInterval(timer);\n        timer = null;\n    };\n}\n\nexport {RecurringServerConnection};","import ServerConnection from \"./Classes/ServerConnection\";\n\nconst server = new ServerConnection(process.env.REACT_APP_BACKEND);\n\nexport default function GuestLogin ({setUser, setHost, history, match}) {\n    const {replace} = history;\n    const {host, guest} = match.params;\n    startGame(guest, host, replace, setHost, setUser);\n    return <div></div>;\n}\n\nasync function startGame(username, host, replace, setHost, setUser) {\n    // set current guest user of the host user to the server\n    await server.getFrom(`/addguest/${host}/${username}`);\n\n    // set current user to the username\n    localStorage.username = username;\n    localStorage.extraUser = host;\n\n    // set set current host to url acquired host\n    setHost(host);\n    setUser(username);\n\n    // route to the game screen\n    replace(`/game/${host}/${username}`);\n}","import { useState } from 'react';\nimport ServerConnection from './Classes/ServerConnection';\n\nconst server = new ServerConnection(process.env.REACT_APP_BACKEND);\n\nexport default function Login ({setUser, setHost, history}) {\n    const {push} = history;\n    const [valid, setValid] = useState(true);\n    return (\n        <div className=\"multiplayer-login\">\n            <div>Enter your nickname</div><br />\n            <input className=\"button\" type=\"text\" id=\"nickname\" maxLength={16} onChange={() => setValid( validate(getUserName(), getGuestName())) } placeholder=\"your nickname...\"/><br />\n            <input className=\"button\" type=\"text\" id=\"guestname\" maxLength={16} onChange={() => setValid( validate(getUserName(), getGuestName())) } placeholder=\"guest's nickname...\"/><br />\n            { !valid && <div className=\"warning-text\" >The username or the guest name is invalid.</div> }\n            <button className=\"button\" disabled={!valid && 'disabled'} onClick={async () => await startGame(getUserName(), getGuestName(), push, setHost, setUser) }>Start Game</button>\n        </div>\n    );\n}\n\nfunction validate(username, guestname) {\n    if (username === guestname) return false;\n    else if ((username === \"\") || (guestname === \"\")) return false;\n    else if (/[^a-zA-Z0-9]/.test(username) || /[^a-zA-Z0-9]/.test(guestname)) return false;\n    return true;\n}\nfunction getUserName() {\n    return document.getElementById(\"nickname\").value;\n}\n\nfunction getGuestName() {\n    return document.getElementById(\"guestname\").value;\n}\n\nasync function startGame(username, guestname, push, setHost, setUser) {\n    // create user on the server and return the name of the username file\n    await server.getFrom(`/adduser/${username}/${guestname}`);\n\n    localStorage.username = username;\n    localStorage.extraUser = guestname;\n\n    setHost(guestname);\n    setUser(username);\n\n    push(`/game/${username}/${guestname}`);\n}","\nfunction prepare(text) {\n    if( text === \"X\" ) {\n        return <div className=\"bi-x X\"></div>\n    }else if (text === \"O\") {\n        return <div className=\"bi-circle O\"></div>\n    }else{\n        return text;\n    }\n}\n\nexport default function GameBoard(props) {\n    return (\n        <table>\n            <tbody>\n                <tr>\n                    <td className=\"a\" onClick={() =>props.handleCellClick(0)}>{prepare(props.table[0])}</td>\n                    <td className=\"b\" onClick={() =>props.handleCellClick(1)}>{prepare(props.table[1])}</td>\n                    <td className=\"c\" onClick={() =>props.handleCellClick(2)}>{prepare(props.table[2])}</td>\n                </tr>\n                <tr>\n                    <td className=\"d\" onClick={() =>props.handleCellClick(3)}>{prepare(props.table[3])}</td>\n                    <td className=\"e\" onClick={() =>props.handleCellClick(4)}>{prepare(props.table[4])}</td>\n                    <td className=\"f\" onClick={() =>props.handleCellClick(5)}>{prepare(props.table[5])}</td>\n                </tr>\n                <tr>\n                    <td className=\"g\" onClick={() =>props.handleCellClick(6)}>{prepare(props.table[6])}</td>\n                    <td className=\"h\" onClick={() =>props.handleCellClick(7)}>{prepare(props.table[7])}</td>\n                    <td className=\"i\" onClick={() =>props.handleCellClick(8)}>{prepare(props.table[8])}</td>\n                </tr>\n            </tbody>\n        </table>\n    );\n}","\nclass Rules{\n\n    constructor(table){\n        this.table = table;\n    }\n\n    didWin(){\n        if (this.checkHorizontal()) return true;\n        if (this.checkVertical()) return true;\n        if (this.checkMajorDiagonal()) return true;\n        if (this.checkMinorDiagonal()) return true;\n        return false\n    }\n\n\n    checkHorizontal(){\n        for(let x = 0; x < 3; x++)\n            if( this.table[(x*3)+0] === this.table[(x*3)+1] )\n                if( this.table[(x*3)+1] === this.table[(x*3)+2] )\n                    if( this.table[(x*3)+0] !== ' ' )\n                        return true;\n        return false;\n    }\n\n    checkVertical(){\n        for(let y = 0; y < 3; y++)\n            if( this.table[y] === this.table[3+y] )\n                if( this.table[3 + y] === this.table[6+y] )\n                    if( this.table[y] !== ' ' )\n                        return true;\n        return false;\n    }\n\n    checkMajorDiagonal(){\n        if ( this.table[0] === this.table[4])\n            if (this.table[4] === this.table[8])\n                if (this.table[0] !== ' ')\n                    return true;\n        return false;\n    }\n\n    checkMinorDiagonal(){\n        if ( this.table[2] === this.table[4])\n            if (this.table[4] === this.table[6])\n                if (this.table[2] !== ' ')\n                    return true;\n        return false;\n    }\n\n}\n\nexport default function winningMove (table){\n    let result = new Rules(table)\n    return result.didWin()\n}","import { Component } from 'react';\nimport GameBoard from './GameBoard';\nimport './App.css'\nimport winningMove from './Rules';\n\nexport default class App extends Component {\n\n  state = {\n    table: [\n        ' ', ' ', ' ',\n        ' ', ' ', ' ',\n        ' ', ' ', ' '\n    ], \n    isXturn: true,\n    progress: 0,\n    ended: false,\n    started: false\n  };\n\n  \n\n  handleCellClick = async (pos) => {\n    if (this.state.progress <= 8 && this.state.table[pos] === ' ' && !this.state.ended ) {\n      let stateClone = { ...this.state };\n      stateClone.table[pos] = stateClone.isXturn ? 'X' : 'O';\n      stateClone.isXturn = !stateClone.isXturn;\n      stateClone.progress++;\n\n      if( winningMove(stateClone.table) )\n        stateClone.ended = true;\n      if( stateClone.progress > 8 )\n        stateClone.ended = true;\n\n      this.setState({...stateClone, started: true});\n      this.waitForNextMove();\n    }\n  };\n\n  cpuClick = (pos) => {\n    if (!this.state.isXturn) {\n      if (this.state.progress <= 8 && this.state.table[pos] === ' ' && !this.state.ended ) {\n        let stateClone = { ...this.state };\n        stateClone.table[pos] = stateClone.isXturn ? 'X' : 'O';\n        stateClone.isXturn = !stateClone.isXturn;\n        stateClone.progress++;\n\n        if( winningMove(stateClone.table) )\n          stateClone.ended = true;\n        if( stateClone.progress > 8 )\n          stateClone.ended = true;\n\n        this.setState(stateClone);\n      }\n    }\n  };\n\n  sleep(val) {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => resolve(), val);\n    });\n  }\n\n  async waitForNextMove() {\n      const nm = () => {\n        const res = parseInt((Math.random() * 9).toString());\n        if (this.state.table[res] === \" \"){\n          return res;\n        }else{\n          let pos = nm();\n          return pos;\n        }\n      };\n      let pos = nm();\n      await this.sleep(1000);\n      this.cpuClick(pos);\n  }\n\n  resetState = () => {\n    this.setState({\n      table: [\n        ' ', ' ', ' ',\n        ' ', ' ', ' ',\n        ' ', ' ', ' '\n      ], \n      isXturn: this.state.isXturn,\n      progress: 0,\n      ended: false,\n      started: false,\n    });\n  };\n\n  isEmpty(table, start=0) {\n    if (table.length === start) return true;\n    else if (table[start] !== ' ' ) return false;\n    else return this.isEmpty(table, start + 1)\n  }\n\n  render () {\n\n    if (!this.state.started && this.isEmpty(this.state.table) && !this.state.isXturn) {\n      this.waitForNextMove();\n      this.setState({...this.state, started: true});\n    }\n\n    return (\n      <div>\n        <center>\n          <h1>Game</h1>\n          <GameBoard handleCellClick={(pos) => { if(this.state.isXturn) this.handleCellClick(pos); }} table={this.state.table}/>\n          <h1>\n          {\n            this.state.ended ? \n              (this.state.progress <= 8) ? \n                (!this.state.isXturn ? 'X won' : 'O won') \n              :\n                'it\\'s a draw!'\n            : \n              `is ${this.state.isXturn ? 'X' : 'O'} turn`\n          }\n          </h1>\n          { this.state.ended && <button onClick={this.resetState} className=\"resetButton\">Reset</button> }\n        </center>\n      </div>\n    );\n\n  }\n\n}","import { Component } from 'react';\nimport GameBoard from './GameBoard';\nimport './App.css'\nimport winningMove from './Rules';\n\nexport default class App extends Component {\n\n  state = {\n    table: [\n        ' ', ' ', ' ',\n        ' ', ' ', ' ',\n        ' ', ' ', ' '\n    ], \n    isXturn: true,\n    progress: 0,\n    ended: false\n  };\n  handleCellClick = pos => {\n    if (this.state.progress <= 8 && this.state.table[pos] === ' ' && !this.state.ended ) {\n      let stateClone = { ...this.state };\n      stateClone.table[pos] = stateClone.isXturn ? 'X' :  'O';\n      stateClone.isXturn = !stateClone.isXturn;\n      stateClone.progress++;\n\n      if( winningMove(stateClone.table) )\n        stateClone.ended = true;\n      if( stateClone.progress > 8 )\n        stateClone.ended = true;\n      \n      this.setState(stateClone);\n    }\n  };\n\n  resetState = () => {\n    this.setState({\n      table: [\n        ' ', ' ', ' ',\n        ' ', ' ', ' ',\n        ' ', ' ', ' '\n      ], \n      isXturn: this.state.isXturn,\n      progress: 0,\n      ended: false\n    });\n  };\n\n  render () {\n\n    return (\n      <div>\n        <center>\n          <h1>Local Play</h1>\n          <GameBoard handleCellClick={this.handleCellClick} table={this.state.table}/>\n          <h1>\n          {\n            this.state.ended ? \n              (this.state.progress <= 8) ? \n                (!this.state.isXturn ? 'X won' : 'O won') \n              :\n                'it\\'s a draw!'\n            : \n              `is ${this.state.isXturn ? 'X' : 'O'} turn`\n          }\n          </h1>\n          { this.state.ended && <button onClick={this.resetState} className=\"resetButton\">Reset</button> }\n        </center>\n      </div>\n    );\n\n  }\n\n}","import { useEffect, useState } from 'react';\nimport GameBoard from './GameBoard';\nimport './App.css'\nimport winningMove from './Rules';\nimport EventEmitter from 'events';\nimport ServerConnection, { RecurringServerConnection } from './Classes/ServerConnection';\nconst server = new ServerConnection(process.env.REACT_APP_BACKEND);\nconst rsc = new RecurringServerConnection(process.env.REACT_APP_BACKEND, 3000);\nconst emitter = new EventEmitter();\n\nconst data = {host: \"\", guest: \"\"};\nwindow.addEventListener('beforeunload', () => {\n  if (data[\"host\"] !== \"\" && data[\"guest\"] !== \"\" ) server.getFrom(`/endgame/${data[\"host\"]}/${data[\"guest\"]}`);\n});\n\nexport default function Game(props) {\n    const {params} = props.match;\n    const {user, changeWhoseTurn} = props;\n    const {host, guest} = params;\n    \n    const [table, setTable] = useState([' ', ' ', ' ',' ', ' ', ' ',' ', ' ', ' ']);\n    const [ended, setEnded] = useState(false);\n    const [progress, setProgress] = useState(0);\n    const [display, setDisplay] = useState(\"block\");\n    const [disconnected, setDisconnected] = useState(false);\n    const [isXturn, setIsXturn] = useState(true);\n    const [stat, setStat] = useState(false);\n    const [sdaWhoseTurn, changeSdaWhoseTurn] = useState(\"\");\n    const [displayStat, setDisplayStat] = useState(true);\n    const [awaitResetStat, setAwaitResetStat] = useState(false);\n\n    const allSetValues = [setTable, setEnded, setProgress, setIsXturn, setStat, setAwaitResetStat];\n\n    emitter.on('started', () => {\n      data[\"host\"] = host;\n      data[\"guest\"] = guest;\n    });\n\n    const allowIfActive = async () => {\n      rsc.getFrom(`/guestactive/${host}/${guest}`, (res) => {\n        const intRes = parseInt(res);\n        if (intRes){\n          rsc.stop();\n          isDisconnected(); \n          emitter.emit('started');\n          setDisplay(\"none\");\n        }\n      });\n    };\n\n    const isDisconnected = async () => {\n      if (!disconnected){\n        setDisconnected(true);\n        rsc.getFrom(`/guestactive/${host}/${guest}`, (res) => {\n          server.getFrom(`/ifhasleft/${host}/${guest}`);\n          const intRes = parseInt(res);\n          if (!intRes) {\n            changeSdaWhoseTurn(\"disconnected\");\n            rsc.stop();\n          }\n        });\n      }\n    };\n\n    const awaitReset = async () => {\n      await sleep(1000);\n      let res = parseInt((await server.getFrom(`/ifreset/${host}/${guest}/${user}`)));\n      if (ended) {\n        if (res) return resetStateReceived(allSetValues, changeSdaWhoseTurn, (user === host) ? guest :host );\n        else return awaitReset();\n      } else return null;\n    }\n\n    useEffect(() => {\n      const cTurn = isXturn ? host : guest;\n      if ( !stat && isEmpty(table) && (user !== cTurn) ){\n        setStat(true);\n        waitForNextMove(table, ended, progress, isXturn, allSetValues, host, guest, user);\n      }\n      if (displayStat) {\n        setDisplayStat(false);\n        allowIfActive();\n      }\n      if (ended && !awaitResetStat) {\n        setAwaitResetStat(true);\n        awaitReset();\n      }\n    });\n    \n    \n\n    return render(sdaWhoseTurn, display, table, ended, progress, isXturn, params,allSetValues, user, changeWhoseTurn);\n}\n\nfunction render (sdaWhoseTurn, display, table, ended, progress, isXturn, params, allSetValues, user, changeWhoseTurn) {\n    const {host, guest} = params;\n    const {innerHeight, innerWidth} = window;\n    return (\n      <div id=\"game\">\n        <center>\n          <h1>Game</h1>\n          <GameBoard handleCellClick={pos => {if (((user === host) && isXturn) || ((user === guest) && !isXturn)) handleCellClick(pos, table, ended, progress, isXturn, allSetValues, host, guest, user)}} table={table}/>\n          <h1>\n          {\n            ended ? \n              (progress <= 8 || winningMove(table)) ? \n                changeWhoseTurn(!isXturn ? host + ' won' : guest + ' won') \n              :\n                changeWhoseTurn('it\\'s a draw!')\n                \n            : changeWhoseTurn(`${isXturn ? host : guest } turn`)\n          }\n          </h1>\n          {sdaWhoseTurn}\n          { ended && <button className=\"resetButton\" onClick={() => resetState(ended, host, guest, allSetValues, user) } >Reset</button> }\n        </center>\n        <div className=\"first-prompt\" style={{display}}>\n          <div style={{top: `${innerHeight/2 - 50}px`}} className=\"waiting-screen\">\n            <div className=\"waiting-for-guest-text\">waiting for {guest}...</div><br />\n            copy the url below <br /><div id=\"link\">{process.env.REACT_APP_FRONTEND}/guest/{host}/{guest}</div><br/>\n            <button  id=\"button\" onClick={async () => {\n              document.getElementById(\"link\").select();\n              try{\n                /* Note: Implement this */\n                document.execCommand('copy');\n                document.getElementById(\"button\").innerHTML = \"Copied\"\n              }catch(err) {\n                // console.error(err);\n                document.getElementById(\"button\").innerHTML = \"Failed to copy\"\n              }\n              }}>Copy Invite link</button>\n          </div>\n        </div>\n      </div>\n    );\n}\n\nasync function resetState (ended, host, guest, allSetValues, user) {\n    const [setTable, setEnded, setProgress, setIsXturn, setStat, setAwaitResetStat] = allSetValues;\n    setTable([' ', ' ', ' ',' ', ' ', ' ',' ', ' ', ' ']);\n    setProgress(0);\n    setEnded(false);\n    setStat(false);\n    setAwaitResetStat(false);\n    await server.getFrom(`/reset/${host}/${guest}/${user}`);\n    // awaitReset(ended, host, guest, user, allSetValues);\n}\n\nasync function resetStateReceived (allSetValues, changeSdaWhoseTurn, user) {\n    const [setTable, setEnded, setProgress, setIsXturn, setStat, setAwaitResetStat] = allSetValues;\n    setTable([' ', ' ', ' ',' ', ' ', ' ',' ', ' ', ' ']);\n    setProgress(0);\n    setEnded(false);\n    setStat(false);\n    setAwaitResetStat(false);\n    changeSdaWhoseTurn(`${user} reset the game.`);\n    await sleep(3000);\n    changeSdaWhoseTurn(``);\n    // awaitReset(ended, host, guest, user, allSetValues);\n}\n\nasync function handleCellClick (pos, table, ended, progress, isXturn, allSetValues, host, guest, user) {\n    if (progress <= 8 && table[pos] === ' ' && !ended ) {\n      // console.log(pos);\n      const char = isXturn ? 'X' : 'O';\n      table[pos] = char;\n      isXturn = !isXturn;\n      progress++;\n\n      await server.postDataTo(`/play/${host}/${guest}`, { name: user, pos, char });\n\n      if( winningMove(table) )\n          ended = true;\n      if( progress > 8 )\n          ended = true;\n      \n      const [setTable, setEnded, setProgress, setIsXturn] = allSetValues;\n      setTable(table);\n      setIsXturn(isXturn);\n      setProgress(progress);\n      setEnded(ended);\n      const cTurn = isXturn ? host : guest;\n      if (user !== cTurn) await waitForNextMove(table, ended, progress, isXturn, allSetValues, host, guest, user);\n  }\n}\n\nfunction isEmpty(table, start=0) {\n  if (table.length === start) return true;\n  else if (table[start] !== ' ' ) return false;\n  else return isEmpty(table, start + 1)\n}\n\nfunction sleep(val) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => resolve(), val);\n  });\n}\n\nfunction waitForNextMove(table, ended, progress, isXturn, allSetValues, host, guest, fuser) {\n  const rsc = new RecurringServerConnection(process.env.REACT_APP_BACKEND, 1000);\n  rsc.getFrom(`/collectupdate/${host}/${guest}/${fuser}`, (res) => {\n    const intRes = parseInt(res);\n    if (intRes > -1){\n      const user = isXturn ? host : guest;\n      rsc.stop();\n      handleCellClick(intRes, table, ended, progress, isXturn, allSetValues, host, guest, user);\n    }\n  });\n}","export default function Heading (props) {\n    const {whoseTurn, currentUser, guestUser} = props;\n    return (\n        <div className=\"header\">\n            {/* TicTacToe */}\n            <div>\n                <span className=\"bi-x-circle mainIconA\"></span> <span className=\"bi-circle mainIconB\"></span>\n            </div>\n            <div>{whoseTurn}</div>\n\n            <div>{currentUser} { currentUser !== \"\" ? (guestUser === \" vs ...waiting\" ? \"\" : \"vs \" + guestUser) : \"\" }</div>\n        </div>\n    );\n}","export default function Home ({history}) {\n    const {push} = history;\n    return (\n        <div className=\"home\">\n            <h2>Select a mode</h2>\n            <button className=\"buttons\" onClick={() => push('/multiplayergame')}>Online Multi-player</button><br/>\n            <button className=\"buttons\" onClick={() => push('/localgame')}>Local Multi-player</button><br/>\n            <button className=\"buttons\" onClick={() => push('/cpugame')}>Single-player</button>\n        </div>\n    );\n}","import './App.css';\nimport { Switch, Route } from 'react-router-dom';\nimport GuestLogin from './GuestLogin';\nimport Login from './Login';\nimport CPUGame from './CPUGame';\nimport LocalGame from './LocalGame';\nimport Game from './Game';\nimport Heading from './Heading';\nimport Home from './Home';\nimport { useState } from 'react';\nimport './bootstrap-icons/bootstrap-icons.css';\n\nfunction App() {\n  const [user, setUser] = useState(localStorage.username);\n  const [host, setHost] = useState(localStorage.extraUser);\n  const [whoseTurn, setWhoseTurn] = useState(\"\");\n  // user\n  // host state   // only when in guest screen\n  return (\n    <div>\n      {/* Heading (props) currentUser (get guestUser()) host whoseTurn */}\n      <Heading currentUser={user} guestUser={host} whoseTurn={whoseTurn} />\n\n      {/* Routes */}\n      <Switch>\n        {/* guestLogin (props) host setCurrentUser setCurrentHost */}\n        <Route path=\"/guest/:host/:guest\" render={(props) => <GuestLogin setUser={setUser} setHost={setHost} {...props} />} />\n\n        {/* game (props) setUserTurn */}\n        <Route path=\"/game/:host/:guest\" render={(props) => <Game user={user} extrauser={host} changeWhoseTurn={data => setWhoseTurn(data)} {...props} />} />\n        <Route path=\"/localgame\" component={LocalGame} />\n        <Route path=\"/cpugame\" render={(props) => <CPUGame user={user} extrauser={host} changeWhoseTurn={data => setWhoseTurn(data)} {...props} />} />\n        <Route path=\"/multiplayergame\" render={(props) => <Login setUser={setUser} setHost={setHost} {...props} />} />\n        {/* login (props) setCurrentUser */}\n        <Route path=\"/\" component={Home} />\n      </Switch>\n      {/* Routes */}\n    </div>\n  );\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom';\nimport reportWebVitals from './reportWebVitals';\n\nlocalStorage.username = \"\";\nlocalStorage.extraUser = \"\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}